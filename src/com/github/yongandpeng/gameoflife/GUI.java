package com.github.yongandpeng.gameoflife;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * Created by bboxh on 2017/6/3.
 */
public class GUI extends JFrame {
    private JPanel jpanelRoot;
    private JButton buttonStart;
    private GUIMainPanel japnelMain;
    private JPanel jpanelBottom;
    private JPanel jpanelTop;

    private int[][] mMatrix;
    private int n = 3;
    private JTextField jTextFieldSpeed;
    private JTextField jTextFieldTime;

    public GUI() {
        int width = Config.SCALE * n > 800 ? Config.SCALE * n : 800;
        this.setSize(width, width + 100);
        this.setLocation(50, 50);
        this.setTitle("生命游戏");
        this.setVisible(true);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
        this.add(jpanelRoot);

        buttonStart.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                GUI.this.strat();
            }
        });
        buttonStart.setText("开始");

        jTextFieldSpeed.setText("speed");

    }

    public void setmMatrix(int[][] mMatrix) {
        japnelMain.setMatrix(mMatrix);
    }

    public void strat() {
        new PaintThread(japnelMain, jTextFieldSpeed).start();
    }

    public static void main(String[] args) {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jpanelRoot = new JPanel();
        jpanelRoot.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        jpanelRoot.add(panel1, BorderLayout.CENTER);
        jpanelBottom = new JPanel();
        jpanelBottom.setLayout(new BorderLayout(0, 0));
        jpanelTop = new JPanel();
        jpanelTop.setLayout(new CardLayout(0, 0));

        jTextFieldSpeed = new JTextField();
        jpanelTop.add(jTextFieldSpeed);
        jTextFieldTime = new JTextField();
        jpanelTop.add(jTextFieldTime);

        panel1.add(jpanelTop, BorderLayout.NORTH);
        panel1.add(jpanelBottom, BorderLayout.SOUTH);
        buttonStart = new JButton();
        buttonStart.setText("Button");
        jpanelBottom.add(buttonStart, BorderLayout.CENTER);
        japnelMain = new GUIMainPanel();
        japnelMain.setLayout(new BorderLayout(0, 0));
        panel1.add(japnelMain, BorderLayout.CENTER);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jpanelRoot;
    }
}

class PaintThread extends Thread{

    private final JTextField mJTextFieldSpeed;
    GUIMainPanel mJapnelMain;

    public PaintThread(GUIMainPanel japnelMain,JTextField jTextFieldSpeed) {
        mJapnelMain = japnelMain;
        mJTextFieldSpeed = jTextFieldSpeed;
    }

    public void run(){
        while(true){
            int[][] matrix = mJapnelMain.getMatrix();

            int speed = 400;

            String speedStr = mJTextFieldSpeed.getText();
            try {
                speed = Integer.parseInt(speedStr);
            } catch (Exception e) {

            }

            matrix = TransStatus.nextMartix(matrix, matrix.length);
            mJapnelMain.setMatrix(matrix);
            mJapnelMain.repaint();
            try {
                Thread.sleep(speed);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
